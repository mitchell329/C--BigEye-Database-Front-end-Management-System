using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

///<Summary> class: CaseForm
///Purpose: Setup the Case Maintenance Form of the application and allows the user to view and maintenance Case information. 
///Author: Mitchell Yuan
///Date: 19/04/2016
///</Summary>
namespace BigEye
{
    public partial class CaseForm : Form
    {
        private DataModule DM;
        private MainForm frmMain;
        private CurrencyManager cmCase;

        ///<Summary> method : CaseForm
        ///Class Constructor Method, initialize Case Maintenance Form and pass the references of Main Form and Data Module to this form.
        ///</Summary>
        public CaseForm(DataModule dm, MainForm mnu)
        {
            InitializeComponent();
            DM = dm;
            frmMain = mnu;
            BindControls();
            pnlAddCase.Left = 328;
            pnlAddCase.Top = 23;
            pnlModifyCase.Left = 328;
            pnlModifyCase.Top = 23;
        }

        /// <summary>method: BindControls
        /// Binding data from dataset to controls in the CaseForm and display a list of Cases and selected Case's details in the form.
        /// </summary>
        public void BindControls()
        {
            lblCaseID.DataBindings.Add("Text", DM.dsBigEye, "T_Case.CaseID");
            lblDescription.DataBindings.Add("Text", DM.dsBigEye, "T_Case.Description");
            lblCaseType.DataBindings.Add("Text", DM.dsBigEye, "T_Case.CaseType");
            lblStatus.DataBindings.Add("Text", DM.dsBigEye, "T_Case.Status");
            lblDateOpened.DataBindings.Add("Text", DM.dsBigEye, "T_Case.DateOpened");
            lblClientID.DataBindings.Add("Text", DM.dsBigEye, "T_Case.ClientID");
            lstCase.DataSource = DM.dsBigEye;
            lstCase.DisplayMember = "T_Case.CaseID";
            lstCase.ValueMember = "T_Case.CaseID";
            cmCase = (CurrencyManager)this.BindingContext[DM.dsBigEye, "T_Case"];
        }

        /// <summary>method: btnPrevious_Click
        /// Allows the user to navigate backward between Cases in the list.
        /// </summary>
        private void btnPrevious_Click(object sender, EventArgs e)
        {
            if(cmCase.Position > 0)
            {
                cmCase.Position--;
            }
        }

        /// <summary>method: btnNext_Click
        /// Allows the user to navigate forward between Cases in the list.
        /// </summary>
        private void btnNext_Click(object sender, EventArgs e)
        {
            if(cmCase.Position < cmCase.Count - 1)
            {
                cmCase.Position++;
            }
        }

        /// <summary>method: btnReturn_Click
        /// Close the Case Maintenance Form and return to Main Menu
        /// </summary>
        private void btnReturn_Click(object sender, EventArgs e)
        {
            Close();
        }

        /// <summary>method: btnAddCase_Click
        /// Show a panel (with Save Case and Cancel buttons) allowing the user to enter new values for the Case’s description, client (using a combo box), type (using a combo box) and date opened (using a date picker). All new Cases are to have a status of Open.
        /// </summary>
        private void btnAddCase_Click(object sender, EventArgs e)
        {
            btnModifyCase.Enabled = false;
            btnDeleteCase.Enabled = false;
            pnlAddCase.Show();
            loadCaseType();
            loadClientID();
        }

        /// <summary>method: loadCaseType
        /// Generate items for the Case Type combo boxes in Add Case panel and Modify Case panel. Display existing Case Types and repeated items will not be shown.
        /// </summary>
        private void loadCaseType()
        {
            //"T_CaseType" table is generated by data adaptor "daCaseType" in data module class.
            //"T_CaseType" table has only one column named "CaseType" which holds existing case types. Each case type has only one record.
            cmbAddCaseType.DataSource = DM.dsBigEye;
            cmbAddCaseType.DisplayMember = "T_CaseType.CaseType";
            cmbAddCaseType.ValueMember = "T_CaseType.CaseType";
            cmbModifyCaseType.DataSource = DM.dsBigEye;
            cmbModifyCaseType.DisplayMember = "T_CaseType.CaseType";
            cmbModifyCaseType.ValueMember = "T_CaseType.CaseType";
        }

        /// <summary>method: loadClientID
        /// Generate items for the Client ID combo boxes in Add Case panel and Modify Case panel. Display existing Client IDs.
        /// </summary>
        private void loadClientID()
        {
            cmbAddClientID.DataSource = DM.dsBigEye;
            cmbAddClientID.DisplayMember = "T_Client.ClientID";
            cmbAddClientID.ValueMember = "T_Client.ClientID";
            cmbModifyClientID.DataSource = DM.dsBigEye;
            cmbModifyClientID.DisplayMember = "T_Client.ClientID";
            cmbModifyClientID.ValueMember = "T_Client.ClientID";
        }

        /// <summary>method: btnAddCancle_Click
        /// If the user clicks on the Cancel button then panel will disappear and the Modify Case and Delete Case buttons enabled.
        /// </summary>
        private void btnAddCancle_Click(object sender, EventArgs e)
        {
            pnlAddCase.Hide();
            btnDeleteCase.Enabled = true;
            btnModifyCase.Enabled = true;
        }

        /// <summary>method: btnSaveCase_Click
        /// If the user enters valid data for all fields and clicks on the Save Case button then a new Case record is saved in the database.
        /// </summary>
        private void btnSaveCase_Click(object sender, EventArgs e)
        {
            DataRow newCaseRecord = DM.dtCase.NewRow();

            if (txtAddDescription.Text == "" || cmbAddCaseType.Text == "")
            {
                MessageBox.Show("You must type in or select a description and a type for the case", "Error");
            }
            else if (cmbAddClientID.Text == "")
            {
                MessageBox.Show("You must select a client for the case", "Error");
            }
            else
            {
                try
                {
                    newCaseRecord["Description"] = txtAddDescription.Text;
                    newCaseRecord["Status"] = txtAddStatus.Text;
                    newCaseRecord["CaseType"] = cmbAddCaseType.Text;
                    newCaseRecord["DateOpened"] = Convert.ToDateTime(dtpAddDateOpened.Text);
                    newCaseRecord["ClientID"] = Convert.ToInt32(cmbAddClientID.Text);

                    DM.dtCase.Rows.Add(newCaseRecord);
                    DM.UpdateCase();
                    MessageBox.Show("Case added successfully!", "Success");
                    pnlAddCase.Hide();
                    btnModifyCase.Enabled = true;
                    btnDeleteCase.Enabled = true;
                    cmCase.Position = cmCase.Count - 1;
                }
                catch (FormatException ex)
                {
                    MessageBox.Show(ex.Message + "\r\n" + "Please enter a number for Client ID.", "Error");
                }
            }
        }

        /// <summary>method: btnModifyCase_Click
        /// If the Status of selected case is "Open", show a panel (with Update Case and Cancel buttons) allowing the user to change the values for the Case’s description, type (using a combo box), or date opened (using a date picker). Else, show an Error message.
        /// </summary>
        private void btnModifyCase_Click(object sender, EventArgs e)
        {
            DataRow currentRow = DM.dtCase.Rows[cmCase.Position];

            if (currentRow["Status"].ToString() == "Open")
            {
                pnlModifyCase.Show();
                btnAddCase.Enabled = false;
                btnDeleteCase.Enabled = false;
                btnPrevious.Enabled = false;
                btnNext.Enabled = false;
                lstCase.Enabled = false;
                loadCaseType();
                loadClientID();

                txtModifyCaseID.Text = currentRow["CaseID"].ToString();
                txtModifyDescription.Text = currentRow["Description"].ToString();
                txtModifyStatus.Text = currentRow["Status"].ToString();
                cmbModifyCaseType.Text = currentRow["CaseType"].ToString();
                dtpModifyDateOpened.Text = currentRow["DateOpened"].ToString();
                cmbModifyClientID.Text = currentRow["ClientID"].ToString();
            }
            else
            {
                MessageBox.Show("Cannot update a closed Case", "Error");
            }
        }

        /// <summary>method: btnUpdateCase_Click
        /// If the user makes valid changes to any of the allowable fields and clicks on the Update Case button then the Case record is updated in the database.
        /// </summary>
        private void btnUpdateCase_Click(object sender, EventArgs e)
        {
            DataRow updateCaseRecord = DM.dtCase.Rows[cmCase.Position];
            if (txtModifyDescription.Text == "" || cmbModifyCaseType.Text == "")
            {
                MessageBox.Show("You must type in or select a description and a type for the case", "Error");
            }
            else
            {
                try
                {
                    updateCaseRecord["Description"] = txtModifyDescription.Text;
                    updateCaseRecord["CaseType"] = cmbModifyCaseType.Text;
                    updateCaseRecord["DateOpened"] = dtpModifyDateOpened.Text;

                    DM.UpdateCase();
                    MessageBox.Show("Case updated successfully!", "Success");
                    pnlModifyCase.Hide();
                    btnAddCase.Enabled = true;
                    btnDeleteCase.Enabled = true;
                    btnPrevious.Enabled = true;
                    btnNext.Enabled = true;
                    lstCase.Enabled = true;
                }
                catch (FormatException ex)
                {
                    MessageBox.Show(ex.Message, "Error");
                    throw;
                }
            }

            return;
        }

        /// <summary>method: btnUpdateCancle_Click
        /// If the user clicks on the Cancel button then the panel will disappear and the Add Case and Delete Case buttons enabled.
        /// </summary>
        private void btnUpdateCancle_Click(object sender, EventArgs e)
        {
            pnlModifyCase.Hide();
            btnDeleteCase.Enabled = true;
            btnAddCase.Enabled = true;
            btnPrevious.Enabled = true;
            btnNext.Enabled = true;
            lstCase.Enabled = true;
        }

        /// <summary>method: btnDeleteCase_Click
        /// Delete an Case record according to the business policy
        /// </summary>
        private void btnDeleteCase_Click(object sender, EventArgs e)
        {
            DataRow deleteCaseRecord = DM.dtCase.Rows[cmCase.Position];

            if (deleteCaseRecord["Status"].ToString() == "Open")
            {
                MessageBox.Show("You may only delete closed Cases", "Error");
            }
            else
            {
                if (MessageBox.Show("Are you sure you want to delete this record?", "Warning", MessageBoxButtons.OKCancel) == DialogResult.OK)
                {
                    deleteCaseAssignment(deleteCaseRecord["CaseID"].ToString());
                    deleteCaseRecord.Delete();
                    DM.UpdateCase();
                    MessageBox.Show("Record deleted successfully", "Success");
                }
                else
                {
                    return;
                }
            }
        }

        /// <summary>method: btnCloseCase_Click
        /// If the user clicks on the Mark Case as Closed button and the selected Case has a status of Open then all Case assignment records for the Case are deleted and the Case’s status is changed to Closed. Otherwise, show an Error message.
        /// </summary>
        private void btnCloseCase_Click(object sender, EventArgs e)
        {
            DataRow closeCaseRow = DM.dtCase.Rows[cmCase.Position];

            if (closeCaseRow["Status"].ToString() == "Open")
            {
                closeCaseRow["Status"] = "Closed";
                deleteCaseAssignment(closeCaseRow["CaseID"].ToString());    // Call the deleteCaseAssignment method and pass the "CaseID" of selected Case as parameter to delete all the assignment records related to the case.
            }
            else
            {
                MessageBox.Show("The Case is already closed", "Error");
            }
        }

        /// <summary>method: deleteCaseAssignment
        /// Loop through the T_Assignment table and delete all the records whose "CaseID" matches the string passed by parameter.
        /// </summary>
        private void deleteCaseAssignment(string v)
        {
            for (int i = 0; i < DM.dtAssignment.Rows.Count; i++)
            {
                string cID = DM.dtAssignment.Rows[i]["CaseID"].ToString();

                if (v == cID)
                {
                    DataRow dr = DM.dtAssignment.Rows[i];
                    dr.Delete();
                    DM.UpdateAssignment();
                }
            }
            
            MessageBox.Show("The assignment related to this Case has been deleted", "Success");
        }
    }
}
